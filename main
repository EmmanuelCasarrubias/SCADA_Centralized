import dash
from dash import dcc, html
import plotly.graph_objects as go
import networkx as nx
import numpy as np
from dash.dependencies import Input, Output, State

# Crear el grafo con nodos Norte, Sur, Este, Oeste y Centro
G = nx.DiGraph()
nodes = {"Norte": (0, 2), "Sur": (0, -2), "Este": (2, 0), "Oeste": (-2, 0), "Centro": (0, 0)}
G.add_nodes_from(nodes)

# Agregar bordes entre los nodos
edges = [("Norte", "Sur"), ("Este", "Oeste"), ("Centro", "Norte"), ("Centro", "Sur"), ("Centro", "Este"), ("Centro", "Oeste")]
G.add_edges_from(edges)

# Definir posiciones de los nodos
pos = {node: (x, y) for node, (x, y) in nodes.items()}

app = dash.Dash(__name__, suppress_callback_exceptions=True)

def generate_graph():
    edge_x = []
    edge_y = []
    for edge in G.edges():
        x0, y0 = pos[edge[0]]
        x1, y1 = pos[edge[1]]
        edge_x.extend([x0, x1, None])
        edge_y.extend([y0, y1, None])

    edge_trace = go.Scatter(x=edge_x, y=edge_y, mode='lines', line=dict(color='black', width=1))

    node_trace = go.Scatter(
        x=[pos[node][0] for node in G.nodes], 
        y=[pos[node][1] for node in G.nodes], 
        mode='markers+text',
        text=list(G.nodes),
        marker=dict(size=20),  # Tamaño de los nodos
        hoverinfo='text'
    )

    return {'data': [edge_trace, node_trace], 
            'layout': go.Layout(
                clickmode='event+select',
                xaxis=dict(visible=False, showgrid=False),
                yaxis=dict(visible=False, showgrid=False),
                plot_bgcolor='rgba(0,0,0,0)'  # Fondo transparente
            )}

def generate_exponential_graph():
    x = np.linspace(0, 10, 100)
    y = np.exp(-x)
    
    trace = go.Scatter(x=x, y=y, mode='lines', name='Exponencial Decreciente')
    layout = go.Layout(title='Función Exponencial Decreciente', xaxis=dict(title='x'), yaxis=dict(title='y'))
    figure = {'data': [trace], 'layout': layout}
    
    return figure

# Layout principal de la aplicación
# Layout principal de la aplicación
app.layout = html.Div([
    html.Div(id='main-titles', children=[
        html.H1('Sistema Central', id='main-title'),
        html.H2('Un sistema de navegación simple', id='sub-title')
    ], style={'text-align': 'center'}),
    dcc.Location(id='url', refresh=False),
    html.Div(id='page-content')
])

# Callback para actualizar el contenido de la página
@app.callback(
    [Output('page-content', 'children'),
     Output('main-titles', 'style')],
    [Input('url', 'pathname')]
)
def display_page(pathname):
    if pathname == '/norte':
        # Ocultar títulos principales cuando se está en la página del norte
        main_titles_style = {'display': 'none'}
        return html.Div([
            html.H1("Subsistema Central del Norte", id='norte-title'),
            html.H2("Descripción del Subsistema Central del Norte", id='norte-subtitle'),
            html.P("Aquí va el contenido específico del subsistema del Norte."),
            dcc.Graph(id='exponential-graph', figure=generate_exponential_graph()),
            html.A(html.Button('Volver a Centro'), href='/')
        ]), main_titles_style
    else:
        # Mostrar títulos principales en la página de inicio
        main_titles_style = {'text-align': 'center'}
        return html.Div([
            dcc.Graph(id='graph', figure=generate_graph())
        ]), main_titles_style


# Callback para manejar clics en el gráfico
@app.callback(
    Output('url', 'pathname'),
    [Input('graph', 'clickData')],
    [State('url', 'pathname')]
)
def handle_graph_click(clickData, current_path):
    if clickData is not None and 'points' in clickData and len(clickData['points']) > 0:
        node_name = clickData['points'][0]['text']
        if node_name in G.nodes:
            return f'/{node_name.lower()}'
    return current_path

if __name__ == '__main__':
    app.run_server(debug=True)
